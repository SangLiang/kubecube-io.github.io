<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>KubeCube – KubeCube</title><link>https://kubecube-io.github.io/</link><description>Recent content on KubeCube</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://kubecube-io.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog: KubeCube 多级租户模型</title><link>https://kubecube-io.github.io/blog/2021/09/16/kubecube-%E5%A4%9A%E7%BA%A7%E7%A7%9F%E6%88%B7%E6%A8%A1%E5%9E%8B/</link><pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate><guid>https://kubecube-io.github.io/blog/2021/09/16/kubecube-%E5%A4%9A%E7%BA%A7%E7%A7%9F%E6%88%B7%E6%A8%A1%E5%9E%8B/</guid><description>
&lt;h2 id="kubecube-多级租户模型">KubeCube 多级租户模型&lt;/h2>
&lt;blockquote>
&lt;p>KubeCube (&lt;a href="https://kubecube.io">https://kubecube.io&lt;/a>) 是由网易数帆近期开源的一个轻量化的企业级容器平台，为企业提供 kubernetes 资源可视化管理以及统一的多集群多租户管理功能。KubeCube 社区将通过系列技术文章解读 KubeCube 的设计特点和技术实现，帮助开发者和用户更快地理解和上手 KubeCube。本文是第二篇，深度解读 KubeCube 的多级租户模型设计。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="imgs/logo+kubecube.png" alt="img">&lt;/p>
&lt;h3 id="背景">背景&lt;/h3>
&lt;p>在我们跟企业交流时，发现不同企业虽然规模不一样，但选择进⾏容器化的初衷还是为了降本增效、很多企业会选择多个部⻔共⽤ K8s 集群或者物理资源，在共享资源的同时，希望有⾜够的隔离性。&lt;/p>
&lt;p>多租户是一种软件架构技术，可以实现多个租户之间资源复用和共享基础设施，方便运营管理，有效节省开发应用成本；同时又可以实现个性化定制，每个租户的数据是隔离的。&lt;/p>
&lt;p>当前大部分云供应商都提供了多租户的解决方案来实现 K8s 资源共享和隔离，以满足企业不同组织架构共享一个 K8s 基础设施的需求。我们将容器服务在以往企业落地实施过程中的经验进行了总结，去数据库化采用更轻量更原生的 CRD + Operator 机制，在传统多租户模型基础上加入了项目层级与软件管理过程相对应，形成了新的多级租户模型，适配企业组织架构和软件资源管理的规范，使得企业可以更好的建立统一的多 K8s 集群管理平台。&lt;/p>
&lt;h3 id="租户模型介绍">租户模型介绍&lt;/h3>
&lt;p>KubeCube 的多级租户模型通过租户和项目实现权限隔离和资源分配。一个租户表示一个组织（部门、团队），做资源隔离。一个项目通常可以表示一个完整业务应用系统，与企业的软件项目管理过程相对应，可以根据业务系统功能分解拆分多个命名空间管理应用子系统。&lt;/p>
&lt;p>租户和项目都是跨集群的概念，所有租户共享多套 K8s 集群基础设施，通过权限限定和配额管理保证必要的隔离，防止恶意操作带来的风险。&lt;/p>
&lt;h3 id="多级租户模型设计">多级租户模型设计&lt;/h3>
&lt;p>KubeCube 多级租户模型提供租户、项目、空间 3 层模型以满足不同规模企业的组织架构层级，从架构上看是一种&lt;strong>层级树形结构&lt;/strong>，一个租户包含多个项目，一个项目包含多个命名空间，项目包含的命名空间可以位于不同的 K8s 集群。这里的命名空间指的是 K8s 的&lt;code>Namespace&lt;/code>，用于实际承接业务应用的部署，是管理的最小单元。&lt;/p>
&lt;p>&lt;img src="imgs/tenant-project-structure.png" alt="image-20210916173931577">&lt;/p>
&lt;p>租户和项目在实现上是一个 CRD ，用户只需要在管控 K8s 集群上创建租户和项目的 CR，KubeCube会将租户和项目的 CR 实时同步到所有的计算 K8s 集群。运维人员可以集中式的管理所有的计算 K8s 集群，新增集群时会自动同步租户项目等基础信息，项目管理员只需要在任一 K8s 集群（包括管控和计算集群）创建命名空间即可。&lt;/p>
&lt;p>&lt;img src="imgs/tenant-project-in-multicluster.png" alt="image-20210916174102135">&lt;/p>
&lt;p>&lt;strong>租户、项目和命名空间三者之间的关联关系是通过层级命名空间实现的&lt;/strong>，每一个租户都关联一个&lt;code>Namespace&lt;/code>，每一个项目也都关联一个&lt;code>Namespace&lt;/code>，通过租户和项目的Manifest里&lt;code>.spec.namespace&lt;/code>字段指定关联的&lt;code>Namespace&lt;/code>名称。租户和项目关联的命名空间与实际承载应用的命名空间不同，它是为了解决管理员仅可以在拥有权限的租户和项目下面创建命名空间而引入的一个特殊命名空间。&lt;/p>
&lt;p>为了避免供应商锁定和更好的兼容原生 K8s 能力，KubeCube 的权限模型是基于 K8s 原生的 RBAC 能力实现的，我们期望项目管理员仅可以在他拥有权限的项目下面创建命名空间。假设授权给一个项目管理员&lt;code>ClusterRole&lt;/code>定义赋予创建&lt;code>Namespace&lt;/code>的权限，由于&lt;code>Namespace&lt;/code>是集群级别资源，那么他将拥有超出项目范围任意创建命名空间的权限，这与我们的期望不符合。&lt;/p>
&lt;p>这里我们引入 HNC （The Hierarchical Namespace Controller）的&lt;code>SubNamespace&lt;/code>的概念，它是命名空间级别的资源，负责自动生成和控制&lt;code>Namespace&lt;/code>的生命周期。在 KubeCube 的设计中，租户和项目管理员都没有直接创建命名空间的权限，他们通过拥有创建&lt;code>SubNamespace&lt;/code>的权限来间接获得创建命名空间权利。&lt;code>SubNamespace&lt;/code>是命名空间级别的资源，通过 RBAC 限制&lt;code>SubNamespace&lt;/code>操作权限，租户管理员只能在自己租户关联的&lt;code>Namespace&lt;/code>下创建&lt;code>SubNamespace&lt;/code>，项目管理员只能在自己项目关联的&lt;code>Namespace&lt;/code>下创建&lt;code>SubNamespace&lt;/code>，再由 HNC 控制器组件根据&lt;code>SubNamespace&lt;/code>自动创建&lt;code>Namespace&lt;/code>，最终实现管理员仅可以在拥有权限的租户和项目下面创建命名空间的权限。&lt;/p>
&lt;p>&lt;img src="imgs/tenant-hnc.png" alt="image-20210916185015532">&lt;/p>
&lt;p>实际使用中，用户创建租户和项目的 CR 时，KubeCube 程序会自动监听并创建相应的&lt;code>SubeNamespace&lt;/code>，再由 HNC 控制器监听并创建&lt;code>Namespace&lt;/code>，继而将租户和项目与命名空间关联起来。&lt;/p>
&lt;p>KubeCube 租户模型采用多层级命名空间的设计除了考虑权限限定能够兼容原生 K8s 的 RBAC 外，还额外考虑到一个因素是可以放置租户级的公共配置和项目级的公共配置，如针对整个项目的统一监控配置。在必要的时候，还可以指定 HNC 控制器将父级命名空间的资源复制传递到子命名空间，如用户权限绑定&lt;code>RoleBinding&lt;/code>配置。&lt;/p>
&lt;h3 id="租户项目权限设计">租户项目权限设计&lt;/h3>
&lt;p>KubeCube 多级租户模型中预设了四种角色，它们的权限由大到小分别是：&lt;/p>
&lt;ul>
&lt;li>平台管理员：拥有最高权限，负责管理 K8s 集群，创建租户，设定角色权限和租户配额。&lt;/li>
&lt;li>租户管理员：拥有某个租户的所有权限，主要负责租户下的项目管理。&lt;/li>
&lt;li>项目管理员：负责在 K8s 集群上创建命名空间，部署应用，配置监控。&lt;/li>
&lt;li>项目观察员：仅拥有项目下命名空间和资源的查询权限，可以查看应用日志和监控。&lt;/li>
&lt;/ul>
&lt;p>在实现上，四种角色是四个&lt;code>ClusterRole&lt;/code>定义，使用&lt;code>CluaterRoleBinding&lt;/code>可以给用户授予平台管理员权限，使用&lt;code>RoleBinding&lt;/code>可以给用户授予受限的租户管理员、项目管理员和项目观察员权限。在层级命名空间结构中，授予一个用户租户管理员权限相当于在租户关联的命名空间及它所有下级命名空间下创建&lt;code>RoleBinding&lt;/code>，同理授予一个用户项目管理员和项目观察员权限相当于在项目关联的命名空间及它所有下级命名空间下创建&lt;code>RoleBinding&lt;/code>。&lt;/p>
&lt;p>&lt;img src="imgs/rbac-design.png" alt="image-20210906190824488">&lt;/p>
&lt;p>HNC 控制器组件在创建&lt;code>Namespace&lt;/code>的时候，可以指定把&lt;code>SubNamespace&lt;/code>所在的父命名空间的所有 &lt;code>RoleBinding&lt;/code>信息往下复制传递。因此给用户授予租户管理员权限时只需要在指定租户关联的命名空间下创建&lt;code>RoleBinding&lt;/code>，授权项目管理员和项目观察员权限时只需要在指定项目关联的命名空间下创建&lt;code>RoleBinding&lt;/code>，权限绑定关系会随着命名空间的创建逐级复制下发，最终在命名空间下会拥有不同人不同角色的&lt;code>RoleBinding&lt;/code>信息。&lt;/p>
&lt;h3 id="资源配额管理设计">资源配额管理设计&lt;/h3>
&lt;p>KubeCube 的配额管理主要是针对多租户共享的 K8s 基础设施集群的资源分配，平台管理员可以为每一个租户划分每一个 K8s 集群的资源使用额度，包括 CPU、内存、磁盘和GPU的配额大小。租户管理员可以继续给项目划分配额，项目管理员可以给每一个承载应用系统的命名空间划分配额。集群信息&lt;code>Cluster&lt;/code> （CRD）里记录着整个集群的可用配额信息，租户和项目的配额信息和已分配信息存储在&lt;code>CubeResourceQuta&lt;/code>（CRD）里，命名空间的配额信息使用 K8s 原生&lt;code>ResourceQuota&lt;/code>。&lt;/p>
&lt;p>&lt;img src="imgs/quota-mgr.png" alt="image-20210916185102212">&lt;/p>
&lt;p>实际使用的时候，项目配额可以省略，如 KubeCube 默认集成的管理平台，平台管理员只需要给每一个租户划分每一个 K8s 集群的可用额度，项目管理员在每一个 K8s 集群上创建命名空间的时候都不能分配超出所属租户的资源额度。&lt;/p>
&lt;h3 id="总结">总结&lt;/h3>
&lt;p>KubeCube 多级租户模型突破传统的容器服务多租户模式，采用租户、项目和空间的三级结构，与企业组织架构和软件管理适配，实现更细粒度的资源配额管理，满足企业统一容器平台的构建需求。以多层级命名空间为基础，租户项目权限隔离兼容原生 RBAC，使得 KubeCube 多级租户模型可以更好的兼容原生 K8s 集群，完全能够在已有 K8s 集群上进行原地升级安装 KubeCube。&lt;/p>
&lt;p>作者：傅思达&lt;/p>
&lt;p>更多内容请访问：https://www.kubecube.io&lt;/p>
&lt;p>KubeCube技术交流群：&lt;/p>
&lt;p>&lt;img src="imgs/wechat.png" alt="image-20210907095921197">&lt;/p></description></item><item><title>Blog: KubeCube设计实践，初学者玩好Kubernetes的正确姿势</title><link>https://kubecube-io.github.io/blog/2021/08/31/kubecube%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5%E5%88%9D%E5%AD%A6%E8%80%85%E7%8E%A9%E5%A5%BDkubernetes%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</link><pubDate>Tue, 31 Aug 2021 00:00:00 +0000</pubDate><guid>https://kubecube-io.github.io/blog/2021/08/31/kubecube%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5%E5%88%9D%E5%AD%A6%E8%80%85%E7%8E%A9%E5%A5%BDkubernetes%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</guid><description>
&lt;p>8月30日，KubeCube开源项目负责人祝剑锋为大家进行了一次线上分享，结合开源项目KubeCube的设计实践，梳理Kubernetes落地面临的实际问题，逐一给出如何破解Kubernetes落地难题的思路，并介绍具体的架构实现。&lt;/p>
&lt;p>点击观看 &lt;a href="https://trclive.huodongxing.com/?eid=4611817956423&amp;amp;roomid=367092716">视频回放&lt;/a>&lt;/p>
&lt;p>点击下载 &lt;a href="./KubeCube%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5%EF%BC%9A%E5%88%9D%E5%AD%A6%E8%80%85%E7%8E%A9%E5%A5%BDKubernetes%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF.pdf">分享PPT&lt;/a>&lt;/p></description></item><item><title>Blog: KubeCube开源：魔方六面，降阶Kubernetes落地应用</title><link>https://kubecube-io.github.io/blog/2021/08/25/kubecube%E5%BC%80%E6%BA%90%E9%AD%94%E6%96%B9%E5%85%AD%E9%9D%A2%E9%99%8D%E9%98%B6kubernetes%E8%90%BD%E5%9C%B0%E5%BA%94%E7%94%A8/</link><pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate><guid>https://kubecube-io.github.io/blog/2021/08/25/kubecube%E5%BC%80%E6%BA%90%E9%AD%94%E6%96%B9%E5%85%AD%E9%9D%A2%E9%99%8D%E9%98%B6kubernetes%E8%90%BD%E5%9C%B0%E5%BA%94%E7%94%A8/</guid><description>
&lt;p>容器技术发展至今，各行各业对其所带来的好处，如多环境交付一致性、弹性伸缩、故障自愈等，已经达成普遍共识。这些好处的实现，依赖于当前容器编排领域的事实标准——Kubernetes平台。然而，Kubernetes的复杂性、学习曲线陡峭也是不争的事实，这对容器技术落地应用造成很大影响。&lt;/p>
&lt;p>根据IDC最新发布的软件定义计算软件市场半年跟踪报告显示，容器软件市场在未来五年仍然会保持超过40%的复合增长率，但 2020 年容器基础架构软件占整体软件定义计算市场的比例仅为16.2%。容器在互联网、金融、AI 等领域已经规模落地，大批头部企业已经基于容器构建新一代企业基础设施平台，但在多数传统企业、中小型企业落地率并不高。&lt;/p>
&lt;p>&lt;img src="imgs/idc-forecast.png" alt="中国软件定义计算软件市场预测">&lt;/p>
&lt;p>这其中的原因，很大程度上是因为企业在落地容器技术时所面临的各种问题，导致落地成本较高，比如：&lt;/p>
&lt;ul>
&lt;li>Kubernetes学习曲线陡峭，配置复杂度高：Kubernetes是一个强大的容器编排系统，但不可否认它也是一个很复杂的分布式系统，其学习门槛高，学习曲线较长，企业需要具备较丰富的经验才能很好的使用和维护Kubernetes集群。这就需要企业付出不小的人力成本及时间成本，对很多中小型企业来说，这个成本是不容小觑的。&lt;/li>
&lt;li>单Kubernetes集群无法满足企业需求，多集群管理效率低：我们接触到的不少客户在生产级容器化落地时，发现单个Kubernetes集群根本无法满足需求，典型的场景是需要开发、测试、演练、预发、生产等多种环境，线下环境需要与线上环境进行隔离，这就需要使用多个Kubernetes集群，独立操作多个Kubernetes集群的效率问题就体现出来了。&lt;/li>
&lt;li>不能较小代价的获得企业落地所需的特性：企业选择Kubernetes，目标还是想利用Kubernetes实现降本、增效，因此多个部门或者同部门下多项目组共享资源是很常见的场景，但还需要不同项目保持必要的隔离性，保证租户之间公平地分配共享集群资源。并且Kubernetes专注于单集群单租户容器编排能力，虽然社区有相关的项目，但在生产级落地使用还是有较高的门槛。&lt;/li>
&lt;li>监控、告警、日志等可观测方面需要建设：社区主流的监控方案是Prometheus、告警是AlertManager、日志方案较多，但使用时配置较复杂，维护难度也较高，这就提升了对运维、研发的要求，势必会影响业务研发的效率。&lt;/li>
&lt;li>国产化支持：近几年国际环境的变化，让我们更进一步认识到了自主可控的重要性，企业底层环境越来越多采用国产处理器、国产操作系统，而容器化涉及的系统，并不是全部支持国产“芯”，这也成为一个影响容器化落地的因素。&lt;/li>
&lt;/ul>
&lt;h2 id="kubecube开源">KubeCube开源&lt;/h2>
&lt;p>&lt;img src="imgs/logo+kubecube.png" alt="kubecube logo">&lt;/p>
&lt;p>为了帮助企业加快容器化落地进程，网易数帆将沉淀多年的容器平台KubeCube开源，希望为新基建做出一份贡献，同时希望以此促进国内相关领域的创新，打造国内开放、安全、自主可控的云原生底座，关键时刻，不会被人“卡脖子”。&lt;/p>
&lt;p>KubeCube (&lt;a href="https://kubecube.io">https://kubecube.io&lt;/a>) 是一个轻量化的企业级容器平台，为企业提供kubernetes资源可视化管理以及统一的多集群多租户管理功能，具有简化应用部署、管理应用的生命周期和丰富的监控和日志审计能力。Cube有魔方之意，寓意通过KubeCube的能力组合，企业可以快速构建一个强大和功能丰富的云原生底座，并增强 DevOps 团队的能力。下面我们具体来看KubeCube这个魔方的六面，都提供了哪些能力。&lt;/p>
&lt;h3 id="一键部署">一键部署&lt;/h3>
&lt;p>KubeCube针对用户的使用场景提供了多种部署方式：适用于POC环境的&lt;a href="https://www.kubecube.io/docs/installation-guide/all-in-one/">All In One部署&lt;/a>，适用于生产环境的&lt;a href="https://www.kubecube.io/docs/installation-guide/install-on-multi-node/">多节点高可用部署&lt;/a>。仅需要一条命令即可完成 Kubernetes+KubeCube 的部署，同时提供了开箱即用的多集群管理、多租户、可观测功能。&lt;/p>
&lt;p>同时考虑到企业可能已有部分能力建设，如日志平台等，KubeCube可以只部署核心服务，提供多集群多租户能力，可观测等组件可以通过热插拔的方式开启或关闭，同时通过热插拔配置完成用户已有系统对接，用户可以根据实际场景灵活选择。&lt;/p>
&lt;p>通过提供Kubernetes资源可视化管理，降低用户的学习曲线，除扩展了必要的企业特性如多租户等能力，其他贴近原生，使用户的学习路线没有断层。&lt;/p>
&lt;p>&lt;img src="imgs/dashboard.png" alt="dashboard">&lt;/p>
&lt;h3 id="多kubernetes集群统一管理">多Kubernetes集群统一管理&lt;/h3>
&lt;p>KubeCube可以接管任意标准Kubernetes集群，对接管的所有Kubernetes集群提供统一的用户管理和基于Kubernetes原生RBAC扩展的访问控制。为提升用户管理多个Kubernetes集群的效率，KubeCube提供了在线运维工具，可以通过KubeCube这一统一入口，快速管理多集群资源：CloudShell可以在线对各集群使用&lt;code>kubectl&lt;/code>，WebConsole可以在线访问各集群中的Pod。&lt;/p>
&lt;p>另外，考虑到混合云场景下KubeCube管控集群与业务集群间的网络抖动、异常等问题。我们提供了业务集群自治能力，当业务集群与KubeCube管控集群失联时，业务集群的访问控制等可正常生效，不会受到影响。&lt;/p>
&lt;h3 id="多租户隔离">多租户隔离&lt;/h3>
&lt;p>在我们跟企业交流时，发现不同企业虽然规模不一样，但选择进行容器化的初衷还是为了降本增效、很多企业会选择多个部门共用Kubernetes集群或者物理资源，在共享资源的同时，希望有足够的隔离性。&lt;/p>
&lt;p>因此KubeCube基于HNC进行了部分扩展，提供租户、项目、空间3层模型，以满足不同规模企业的组织架构层级，并以此提供资源可见性隔离、配额控制等。使企业不同部门通过共享降低成本的同时，保证必要的隔离，防止恶意操作带来的风险。&lt;/p>
&lt;h3 id="完全兼容原生-kubernetes-api">完全兼容原生 Kubernetes API&lt;/h3>
&lt;p>KubeCube除能够通过UI管理Kubernetes资源外，还提供了OpenAPI以及Kubernetes API访问（可以使用&lt;code>kubectl&lt;/code>、&lt;code>client-go&lt;/code>直接访问集群），所有访问方式均通过统一的身份认证及权限访问控制。通过OpenAPI可以方便的与企业已有系统进行集成，如果企业已有部分能力建设，如使用&lt;code>kubectl&lt;/code>的运维脚本等，都可以无缝迁移。&lt;/p>
&lt;h3 id="开箱即用的可观测功能">开箱即用的可观测功能&lt;/h3>
&lt;p>&lt;img src="imgs/ctrl-monitor.png" alt="管控组件监控" style="zoom:30%;" />&lt;/p>
&lt;p>提供日志、监控、告警功能，提升问题定位及运维效率，可视化配置，告别复杂的配置规则。&lt;/p>
&lt;p>提供多维度基础指标监控，覆盖集群、物理节点、工作负载等多种维度，提供CPU、内存、磁盘、网络、GPU等常用指标，满足日常运维需求，帮助用户快速发现、定位问题。&lt;/p>
&lt;p>基于自研的日志配置分发服务，动态感知Pod变化，使日志采集对业务无侵入，同时可减少资源占用，降低成本。&lt;/p>
&lt;h3 id="arm及国产化支持">ARM及国产化支持&lt;/h3>
&lt;p>KubeCube支持AMD及ARM架构，同时支持目前主流的国产处理器及操作系统，如飞腾处理器、麒麟操作系统等。&lt;/p>
&lt;h2 id="一图看懂kubecube">一图看懂KubeCube&lt;/h2>
&lt;p>以上是KubeCube的六大特性介绍。我们在下图中更全面地总结了KubeCube的核心信息，可以帮助大家更好地了解KubeCube的能力和用途。&lt;/p>
&lt;p>&lt;img src="imgs/kubecube-long-pic.jpg" alt="KubeCube长图">&lt;/p>
&lt;h2 id="写在最后">写在最后&lt;/h2>
&lt;p>未来我们会持续提供更多功能，帮助企业简化容器化落地。也欢迎大家的宝贵建议，添加以下微信进入KubeCube交流群。&lt;/p>
&lt;p>&lt;img src="imgs/kubecube-wechat.png" alt="kubecube微信" style="zoom:50%;" />&lt;/p>
&lt;p>&lt;strong>作者简介：&lt;/strong> 祝剑锋，网易数帆轻舟容器平台负责人，KubeCube社区核心维护者，主导KubeCube容器平台的开源工作，负责网易数帆轻舟容器平台集团内大规模落地及产品化建设。具有六年Kubernetes及容器平台相关研发及大规模实践经验。&lt;/p></description></item></channel></rss>