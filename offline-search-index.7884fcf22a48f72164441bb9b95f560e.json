[{"body":"本文档介绍了如何在 KubeCube 上创建、使用和编辑 Deployment。\n准备工作 创建一个租户，在租户下创建一个项目，在项目下创建一个命名空间，创建一个账号并赋予该命名空间操作权限。\n创建 Deployment 1、选择租户和项目，选择集群和空间，展开【工作负载】菜单，点击 【Deployments】，进入 Deployment 管理页面。\n2、点击【部署】，编写 deployment 的 yaml 文件。点击【确定】，即开始部署该 deployment。\ndeployment 的 规范可参考：https://v1-20.docs.kubernetes.io/docs/concepts/workloads/controllers/deployment/。\n管理 Deployment 选择租户和项目，选择集群和空间，展开【工作负载】菜单，点击【Deployments】，进入 Deployment 管理页面，可以看到该命名空间下的所有 deployment 名称以及状态。\n这里的状态指的是该 deployment 下所有副本的状态。\n desired：预期的副本数； updated：已经是最新版本的副本数； available：可用副本数； unavailable：不可用副本数； total：总副本数。  同时也可以根据名称对列表进行搜索，或对单个 deployment 进行副本数调整、滚动更新、删除，以及修改 Yaml。\n查看 Deployment 详情 在 Deployment 管理页面，点击任一 deployment 名称，可以进入到该 deployment 详情页。\n在 Deployment 详情页，可以查看到 deployment 的具体信息，以及该 deployment 所关联的所有副本的详情、副本的监控数据以及该 deployment 和副本的事件信息和 condition 信息。\n","excerpt":"本文档介绍了如何在 KubeCube 上创建、使用和编辑 Deployment。\n准备工作 创建一个租户，在租户下创建一个项目，在项目下创建 …","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/k8s%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E7%AE%A1%E7%90%86/deployment/","title":"Deployment"},{"body":"1、获取密钥 登录KubeCube，在右上角的下拉菜单中找到【密钥管理】页面，可以在该页面管理您账户的访问密钥对。\n 若进入到该页面中无密钥则点击【添加密钥】按钮创建，最多可以创建5对密钥。\n 2、根据密钥对生成 token  token有效期默认1小时，可以在启动时修改配置。\n 生成token的接口如下：\n请求url\n/api/v1/cube/key/token?accessKey=\u0026secretKey= Method：GET\n描述：根据密钥对生成token，token有效期默认为1小时。\n请求参数\n   参数名 说明 参数类型 是否必填     accessKey 密钥对Ak string 是   secretKey 密钥对Sk string 是    返回参数\n   参数名 说明 参数类型     token 可以用于访问KubeCube OpenAPI的token string    请求示例\ncurl https://kubecube.com/api/v1/cube/key/token?accessKey=0ad66675488c4855a07113a8e65719e3\u0026secretKey=8f732a291795418f81cec6f1b064334a -X GET 返回示例\n{\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VySW5mbyI6eyJ1c2VybmFtZSI6ImFkbWluIiwiZ3JvdXBzIjpbImt1YmVjdWJlIl19LCJleHAiOjE2MjQwMDMxMTJ9.DuR36vDDhLe_F5gw_T-8FCV7ZZVCJ1ye0dEpfELSa3g\"} 3、使用 token 访问 API 在访问KubeCube openAPI时，在请求中加上请求头Authorization:Bearer ${token}以标识访问者的身份，其中${token}是第二步中获取到的token值，具体接口信息见下接口文档。\n请求示例\ncurl -X GET -H 'Authorization:Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VySW5mbyI6eyJ1c2VybmFtZSI6ImFkbWluIiwiZ3JvdXBzIjpbImt1YmVjdWJlIl19LCJleHAiOjE2MjQwMDMxMTJ9.DuR36vDDhLe_F5gw_T-8FCV7ZZVCJ1ye0dEpfELSa3g' https://kubecube.com/api/v1/cube/proxy/clusters/pivot-cluster/api/v1/pods -k 得到结果\n{\"apiVersion\":\"v1\",\"code\":404,\"details\":{\"kind\":\"pods\",\"name\":\"kubecube\"},\"kind\":\"Status\",\"message\":\"pods \\\"kubecube\\\" not found\",\"metadata\":{},\"reason\":\"NotFound\",\"status\":\"Failure\"} 4、接口文档 部署好 KubeCube 后，访问 http://localhost:8080/swagger/index.html#/ 即为 KubeCube 的接口文档，该接口文档描述了 KubeCube 中的部分接口。\n除此文档中的接口，如果需要访问 Kubernetes 资源，接口文档如下：\n请求url：\n/api/v1/cube/proxy/clusters/{clusterName}/*url?selector=\u0026pageSize=\u0026pageNum=\u0026sortName=\u0026sortOrder=sortFunc=   *url指的是直接调用 Kubernetes 时的接口，\n接口文档为：https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#watch-pod-v1-core。\n  selector：查询条件，支持精准匹配和模糊匹配：\n 精准匹配：eg. selector=key1=value1,key2=value2,key3=value3； 模糊匹配：eg. selector=key1~value1,key2~value2,key3~value3； 混合匹配：eg. selector=key1~value1,key2=value2,key3=value3；    pageSize：查询结果每页的数量，默认值为10；\n  pageNum：查询结果的页数，默认为1；\n  sortName：查询结果排序依据的字段，默认为 “metadata.name”；\n  sortOrder：查询结果正序或倒序显示：正序为 “asc”，倒序为 “desc”，默认为正序；\n  sortFunc：sortName 的数据类型，默认为 “string”。\n  返回参数同 Kubernetes 的返回参数。\n请求示例\n如果需要查询某个namespace下的 deployment 列表，并希望结果以 deployment 的创建时间倒序排序、以20条结果为1页，返回第2页的结果：\n1、查询 Kubernetes 接口文档：查询 deployment 列表的接口为\nGET /apis/apps/v1/namespaces/{namespace}/deployments 2、因此， KubeCube 查询 deployment 的对应接口为\nGET /api/v1/cube/proxy/clusters/{clusterName}/apis/apps/v1/namespaces/{namespace}/deployments？sortName=CreationTimestamp\u0026sortOrder=desc\u0026pageSize=20\u0026pageNum=2 3、使用 token 访问则为：\ncurl -X GET -H 'Authorization:Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VySW5mbyI6eyJ1c2VybmFtZSI6ImFkbWluIiwiZ3JvdXBzIjpbImt1YmVjdWJlIl19LCJleHAiOjE2MjQ2MTY3MjZ9.FCfuVzADMAgYeOm39Wlhs-3B6kW-Z6bZ9js1lKoNub0' https://kubecube.com/api/v1/cube/proxy/clusters/pivot-cluster/apis/apps/v1/namespaces/namespaceA/deployments?sortName=metadata.creationTimestamp\u0026sortOrder=desc\u0026pageSize=20\u0026pageNum=2 -k ","excerpt":"1、获取密钥 登录KubeCube，在右上角的下拉菜单中找到【密钥管理】页面，可以在该页面管理您账户的访问密钥对。\n 若进入到该页面中无密钥 …","ref":"/docs/%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/openapi%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/","title":"OpenAPI使用指南"},{"body":"本文档介绍了如何在 KubeCube 上创建、使用和编辑 PVC（Persistent Volume Claim）。\n准备工作 创建一个租户，在租户下创建一个项目，在项目下一个创建一个命名空间，创建一个账号并赋予该命名空间操作权限。\n创建 PVC 1、选择租户和项目，选择集群和空间，点击存储菜单，进入 PVC 管理页面。在管理页面可以进行 PVC 记录的添加、设置、删除和 Yaml 设置。\n2、点击创建存储声明，弹出创建存储声明的窗口。\n 存储类别：选择存储类别，存储类别可以在集群管理页面添加 名称：存储声明名称 容量：填写所需存储容量 模式：独占读写（ ReadWriteOnce：读写权限，并且只能被单个节点挂载 ）、只读共享（ ReadOnlyMany：只读权限，允许被多个节点挂载 ）、共享读写（ ReadWriteMany：读写权限，允许被多个节点挂载 ）  查看 PVC 详情 在 PVC 管理页面选择一条 PVC 记录，可以查看该 PVC 记录的详细信息，可以查看绑定的副本信息和监控信息。并且可以管理操作，包括删除、设置和 Yaml 设置。\n","excerpt":"本文档介绍了如何在 KubeCube 上创建、使用和编辑 PVC（Persistent Volume Claim）。\n准备工作 创建一个租 …","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/k8s%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/storage-manage/pvc/","title":"PVC"},{"body":"本文档介绍了如何在 KubeCube 上创建、使用和编辑 Secret。\nKubernetes Secret 用于存储和管理一些敏感数据，比如密码密钥等敏感信息。它把 Pod 想要访问的加密数据存放到 Etcd 中。然后用户就可以通过在 Pod 的容器里挂载 Volume 的方式或者环境变量的方式访问 Secret 里保存的信息。\n准备工作 创建一个租户，在租户下创建一个项目，在项目下一个创建一个命名空间，创建一个账号并赋予该命名空间操作权限。\n创建 Secret 1、选择租户和项目，选择集群和空间，展开配置菜单，点击 Secret 菜单按钮，进入 Secret 管理页面。\n2、点击创建 Secret 按钮，进入创建 Secret 页面，填写信息后，点击立即创建按钮，即可创建一个 Secret。\n![image-20210620193157527](D:\\2 轻舟容器\\文档中心\\kubecube-io.github.io\\static\\imgs/产品使用指南/K8s资源管理/配置管理/secret\\create.png)\n 名称：输入 Secret 名称。 类型：  Opaque：base64 编码格式的 Secret，用来存储密码、密钥等。 DockerConfigJson ： 用来存储私有 docker registry 的认证信息。 IngressTLS：配置 Ingress TLS 密钥。   根据选择的类型，输入相应的信息。  查看 Secret 详情 在 Secret 管理页面，点击具体一条 Secret 记录的名称，进入详情页面查看 Secret 的详细信息。\n","excerpt":"本文档介绍了如何在 KubeCube 上创建、使用和编辑 Secret。\nKubernetes Secret 用于存储和管理一些敏感数据，比 …","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/k8s%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/config-manage/secret/","title":"Secret"},{"body":"本文档介绍了如何在 KubeCube 上创建、使用和编辑 Service。\n准备工作 创建一个租户，在租户下创建一个项目，在项目下一个创建一个命名空间，在命名空间下创建一个 Deployment，创建一个账号并赋予该命名空间操作权限。\n创建 Service 1、选择租户和项目，选择集群和空间，展开服务与发现菜单，点击 Services 菜单按钮，进入 Service 管理页面。\n2、点击创建服务按钮，进入创建服务页面，填写信息后，点击立即创建按钮，即可创建一个 Service。\n  名称：输入服务名称\n  类型：选择服务类型为 ClusterIP 或者 NodePort\n  使用方式：对于 ClusterIP 类型，需要选择使用方式为常规服务、Headless 服务或外部服务\n  Selector：选择关联的工作负载，支持高级自定义\n  标签：定义标签\n  Ports：添加应用端口与服务端口的映射关系\n  会话保持：开通/关闭会话保持\n  管理 Service 选择租户和项目，选择集群和空间，展开服务与发现菜单，点击 Services 菜单按钮，进入 Service 管理页面，可以对 Service 列表进行设置重编辑，删除和 Yaml 设置。\n查看 Service 详情 在 Service 管理页面，点击具体一条服务名称，进入 Service 详情页面。\nService 详情页面除了可以管理 Service，还可以查看 Service 的详细信息、关联的副本信息和事件信息，支持设置 Nginx Ingress 类型的对外服务端口供外部访问。\n","excerpt":"本文档介绍了如何在 KubeCube 上创建、使用和编辑 Service。\n准备工作 创建一个租户，在租户下创建一个项目，在项目下一个创建一 …","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/k8s%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/service-discovery/service/","title":"Service"},{"body":"KubeCube是一个开源的企业级容器平台，为企业提供K8s资源可视化管理以及统一的多集群多租户管理功能。KubeCube可以简化应用部署、管理应用的生命周期和提供丰富的监控和日志审计功能，帮助企业快速构建一个强大和功能丰富的容器云平台，并增强 DevOps 团队的能力。\n项目特点  开箱即用  学习曲线平缓，集成统一认证鉴权、多集群管理、监控、日志、告警等功能，释放生产力 运维友好，提供K8s资源可视化管理和统一运维，具备全面的自监控能力 快速部署，基于CICD流水线的一站式应用构建发布和基于Helm的一站式应用程序部署   多租户管理  提供租户、项目、空间多级模型，以满足企业内资源隔离和软件项目管理需求 基于多租户模型，提供权限控制、资源共享/隔离等能力   统一的多K8s集群管理  提供多K8s集群的中央管理面板，支持集群导入 在多K8s集群中提供统一的身份认证和拓展K8s原生RBAC能力实现访问控制， 通过WebConsole、CloudShell快速管理集群资源   集群自治  当KubeCube管理集群停机维护时，各业务集群可保持自治，保持正常的访问控制，业务Pod无感知   功能热插拔  提供最小化安装，用户可以根据需求随时开关功能 可热插拔，无需重启服务   多种接入方式  支持Open API：方便对接用户现有系统 兼容K8s原生API：无缝兼容现有K8s工具链，如kubectl   无供应商锁定  可导入任意标准K8s集群，更好的支持多云/混合云   其他功能  操作审计 丰富的可观测性功能    解决的问题  企业上云：简化学习曲线，帮助企业以较小的成本完成容器云平台搭建，实现应用快速上云需求，辅助企业推动应用上云。 持续交付能力：简洁直观的工作负载管理页面，提供K8s资源可视化，具备丰富的DevOps功能，为企业从传统开发模式转为敏捷迭代可持续交付的开发模式提供有力支持。 资源隔离：多租户管理提供租户、项目和空间三个层级的资源隔离和权限控制，完全适配企业级私有云建设的资源和权限管控需求。 集群规模限制：统一的容器云管理平台，可以管理多个业务K8s集群，数量不设上限。既能通过横向扩容新增K8s集群的方式解决单个K8s集群规模的限制，又可以满足不同业务条线要求独占集群的需求。 监控告警增强：提升平台运维效率和应用保障水平，导入业务集群后可一键添加监控告警组件到集群，监控指标丰富，告警实时性高，支持短信、邮箱、微信、钉钉和企业内部通讯软件等告警通道。 海量日志收集和分析：自动采集应用容器日志，提供丰富灵活的查询功能，智能分析日志并发出告警。  ","excerpt":"KubeCube是一个开源的企业级容器平台，为企业提供K8s资源可视化管理以及统一的多集群多租户管理功能。KubeCube可以简化应用部署、 …","ref":"/docs/overview/overview/","title":"产品介绍"},{"body":"","excerpt":"","ref":"/docs/overview/","title":"介绍"},{"body":"包含告警静默、升级、抑制\n","excerpt":"包含告警静默、升级、抑制\n","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/%E5%91%8A%E8%AD%A6/%E5%91%8A%E8%AD%A6%E8%A7%84%E5%88%99%E7%AE%A1%E7%90%86/","title":"告警规则管理"},{"body":"KubeCube 提供多集群管理的能力，可以基于管控集群添加或者删除集群，并对所有接管的集群提供统一的认证和鉴权入口\n ⚠️ 计算集群信息不允许修改，若有修改需求，请先删除计算集群再重新添加，该操作存在的一定风险，删除计算集群期间，计算集群所有资源不受管控集群管控，认证和鉴权功能暂时关闭，直到该集群被重新添加\n 查看集群信息 选择集群查看对应的基本信息，Node、StorageClass、NetworkPolicy 以及 PV\n添加计算集群 在节点上构建新集群并添加\n添加已有集群\n删除计算集群 点击【删除配置】来删除计算集群，管控集群无法通过 Console 删除。删除计算集群意味着 KubeCube 控制面不再接管该集群，该集群恢复被接管前的样子，集群上运行的工作负载、服务等不会受到影响，可以通过添加该集群来重新接管\n","excerpt":"KubeCube 提供多集群管理的能力，可以基于管控集群添加或者删除集群，并对所有接管的集群提供统一的认证和鉴权入口\n ⚠️ 计算集群信息不 …","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD/k8s%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86/%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86/","title":"多集群管理"},{"body":"KubeCube 提供对 k8s StorageClass 资源的原生管理能力\n查看 StorageClass 点击【集群管理】，选择需要查看的集群，点击【存储类别】，查看该集群中所有的 StorageClass，可以在右上角搜索栏中输入资源名称进行模糊匹配，点击【删除】可删除此 StorageClass\n创建 StorageClass 点击【创建存储类别】来创建新的 StorageClass\n","excerpt":"KubeCube 提供对 k8s StorageClass 资源的原生管理能力\n查看 StorageClass 点击【集群管理】，选择需要查 …","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD/k8s%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86/%E9%9B%86%E7%BE%A4%E7%BA%A7%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/storageclass/","title":"存储类别(StorageClass)"},{"body":"本文档介绍了如何在 KubeCube 上进行密钥管理。\n密钥管理提供 AccessKey 和 SecretKey 供用户系统调用 OpenAPI 接口时进行认证。\n管理密钥 用户登录后，鼠标移动到右上角用户名称，在下拉菜单中选择密钥管理，进入密钥管理页面。在密钥管理页面可以添加密钥、删除密钥和查看密钥信息。\n使用密钥 使用 AccessKey 和 SecretKey 可以获取用户 token，将token放到请求头可以请求 KubeCube 的 OpenAPI 接口。\nHTTP Request：\nGET /api/v1/cube/key/token Query Parameters：\n   Parameter Description     accessKey AccessKey   secretKey SecretKey    Response：\n   Code Info     200 {“token”: “token info”}    ","excerpt":"本文档介绍了如何在 KubeCube 上进行密钥管理。\n密钥管理提供 AccessKey 和 SecretKey …","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/k8s%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/other/key-manage/","title":"密钥管理"},{"body":"","excerpt":"","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/k8s%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E7%AE%A1%E7%90%86/","title":"工作负载管理"},{"body":"快速部署使用 All-In-One 的方式进行部署\n部署环境确认 请根据 部署环境要求 确认快速部署的前置要求\nAll In One 部署 All In One 提供两种部署方式：\n  在 Linux 上部署 KubeCube\n  在 Kubernetes 集群中部署 KubeCube\n  等待部署完成 KubeCube 部署完成后，请根据提示信息登陆 console 管理页面\n使用 admin 账户登陆 console ⚠️请在登陆后修改 admin 用户的密码\n","excerpt":"快速部署使用 All-In-One 的方式进行部署\n部署环境确认 请根据 部署环境要求 确认快速部署的前置要求\nAll In One …","ref":"/docs/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/%E9%83%A8%E7%BD%B2/","title":"快速部署"},{"body":"本文档介绍了如何在 KubeCube 上创建、管理用户。\n准备工作 使用平台管理员账号登录 KubeCube。\n新增用户 1、使用平台管理员账号登录 KubeCube 后，展开【组织管理】菜单，点击【用户管理】，进入用户管理页面。\n2、点击【新增用户】，填写用户信息。\n  登录账号：\n 不能超过253个字符； 只能包含小写字母、数字，以及'-' 和 ‘.'； 须以字母数字开头； 须以字母数字结尾； 全局唯一标识，不允许重复，不允许修改。    用户名：\n 平台内展示的用户名。    密码：\n 长度不得少于8位且不大于20位； 至少应包括字母、数字以及特殊符号中两类。    电话：\n 符合中国手机号规范，如188****1234； 选填。    Email：\n 符合日常邮件地址规范； 选填。    点击【确定】，即创建该用户。\n3、如果需要批量创建用户，可以点击【批量导入】，【下载模版】，填写表格内容后上传文件，即可批量创建表格内填写的用户。表格填写规范同上。\n用户管理 使用平台管理员账号登录 KubeCube 后，展开【组织管理】菜单，点击【用户管理】，进入用户管理页面。\n在用户管理页面，可以看到该平台的所有用户，包括每个用户的登录账号、用户名、类型、上次登录IP以及上次登录时间。\n这里的用户【类型】指的是用户的登录方式，如果是使用账号密码登录，则类型为【normal】，如果为其他登录方式，如LDAP、Github等通过第三方平台认证登录，则类型为对应的第三方平台名称。目前 KubeCube 只支持密码登录方式。\n同时，平台管理员可以在该界面修改用户信息，包括用户密码、用户名、电话以及 Email，规范同上。用户登录账号不支持修改。\n","excerpt":"本文档介绍了如何在 KubeCube 上创建、管理用户。\n准备工作 使用平台管理员账号登录 KubeCube。\n新增用户 1、使用平台管理员 …","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/","title":"用户管理"},{"body":"","excerpt":"","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD/","title":"运维管理"},{"body":"在进行 All In One 或者多节点部署之前，请按照以下内容确认环境要求\n系统版本及硬件要求    操作系统 最低要求     Ubuntu 16.04, 18.04 CPU：4 核，内存：8 G，磁盘空间：20 G   Debian Buster, Stretch CPU：4 核，内存：8 G，磁盘空间：20 G   CentOS 7.x CPU：4 核，内存：8 G，磁盘空间：20 G     以上系统配置要求适用于 KubeCube 默认最小化 All In One 模式安装，如需启动更多可插拔组件和拓展功能，建议机器配置为 8 核 CPU 和 16 G 内存\n 容器运行时    支持的容器运行时 版本     Docker 19.3.12+     节点上若无容器运行时，部署脚本将自动安装 docker 19.03.12 作为容器运行时\n 前置准备 在使用部署脚本开始 KubeCube 的安装前，需要更新当前操作系统的包管理器的源\n Ubuntu/Debian：apt update -y CentOS：yum update -y  ","excerpt":"在进行 All In One 或者多节点部署之前， …","ref":"/docs/%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83%E8%A6%81%E6%B1%82/","title":"部署环境要求"},{"body":"","excerpt":"","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/%E6%97%A5%E5%BF%97/%E9%87%87%E9%9B%86%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86/","title":"采集任务管理"},{"body":"","excerpt":"","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD/k8s%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86/%E9%9B%86%E7%BE%A4%E7%BA%A7%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/","title":"集群级资源管理"},{"body":"对于想要快速开始、快速体验的用户来说，All In One 是最佳的安装方式\n在 Linux 上部署 KubeCube 开始安装 在 Linux 机器上执行部署脚本\ncurl -fsSL https://gitee.com/kubecube/manifests/raw/master/entry.sh | bash 在 Kubernetes 集群中部署 KubeCube ⚠️修改 Kubernetes API-Server 配置 必要性\n  KubeCube 对多集群提供统一的认证和鉴权服务，需要使用 k8s api-server 的 auth-webhook 能力来做拓展。\n  KubeCube 提供对 k8s-apiserver 日志进行审计的能力，这需要为 k8s api-server 指定审计服务后端。\n  修改操作\n如果您的 k8s api-server 服务是以 deployment 形式运行的，请直接修改 deployment ；如果您的 k8s api-server 服务是以 static pod 形式运行的，您需要修改对应的 manifest 文件，它的文件路径通常为 /etc/kubernetes/manifests/kube-apiserver.yaml  ，修改内容如下：\napiVersion: v1 kind: Pod metadata: name: kube-apiserver namespace: kube-system spec: containers: - command: - kube-apiserver - --audit-log-format=json - --audit-log-maxage=10 - --audit-log-maxbackup=10 - --audit-log-maxsize=100 - --audit-log-path=/var/log/audit - --audit-policy-file=/etc/cube/audit/audit-policy.yaml - --audit-webhook-config-file=/etc/cube/audit/audit-webhook.config - --authentication-token-webhook-config-file=/etc/cube/warden/webhook.config name: kube-apiserver volumeMounts: - mountPath: /var/log/audit name: audit-log - mountPath: /etc/cube name: cube readOnly: true volumes: - hostPath: path: /var/log/audit type: DirectoryOrCreate name: audit-log - hostPath: path: /etc/cube type: DirectoryOrCreate name: cube 开始安装 在 Linux 机器上执行部署脚本\nexport CUSTOMIZE=\"true\";curl -fsSL https://gitee.com/kubecube/manifests/raw/master/entry.sh | bash 设置安装脚本参数 该安装模式下，需要修改以下参数：\nINSTALL_KUBECUBE_MEMBER=“false”\nMASTER_IP=\"${node ip}\"\nLOCAL_IP=\"${node ip}\"\n ${node ip} 表示你运行脚本所在 node 机器的 ip，该 node 需要可操作 kubectl\n # if install kubecube on pivot cluster INSTALL_KUBECUBE_PIVOT=\"true\" # if install kubecube on member cluster INSTALL_KUBECUBE_MEMBER=\"false\" # if install k8s INSTALL_KUBERNETES=\"false\" # there are four node mode below: # \"master\" : node will be installed as a master of cluster # \"node-join-master\" : node will be install as a worker of cluster to join master # \"control-plane-master\" : node will be installed as a master to control plane of cluster # \"node-join-control-plane\" : node will be installed as a master to join control plane NODE_MODE=\"master\" # +optional # must be set when INSTALL_KUBECUBE_MEMBER=\"true\" # this value is the name of member cluster you # want to take over MEMBER_CLUSTER_NAME=\"\" # +optional # must be set when NODE_MODE=\"control-plane-master\" # or \"node-join-control-plane\" CONTROL_PLANE_ENDPOINT=\"\" #{ip}:{port} , dns # master ip means master node ip of cluster MASTER_IP=\"x.x.x.x\" # local ip mean node ip self, will equal to master ip # when NODE_MODE=\"master\" or \"control-plane-master\" LOCAL_IP=\"x.x.x.x\" # +optional # KUBECUBE_HOST must be set when as a member cluster to # join pivot cluster, the value is pivot node ip KUBECUBE_HOST=\"\" # zone has two choice # 1. \"cn\" : in mainland # 2. \"others\" : out of mainland ZONE=\"cn\" # k8s version you want to install KUBERNETES_VERSION=\"1.19.0\" # +optional # the user who can access master node, it can be empty # when NODE_MODE=\"master\" or \"control-plane-master\" MASTER_USER=\"root\" # +optional # must be empty when ACCESS_PRIVATE_KEY_PATH set # password for master user to access master node ACCESS_PASSWORD=\"\" # +optional # must be empty when ACCESS_PASSWORD set # ACCESS_PRIVATE_KEY for master user to access master node ACCESS_PRIVATE_KEY_PATH=\"/root/.ssh/id_rsa\" 等待部署完成 KubeCube 部署完成后，请根据提示信息登陆 console 管理页面\n使用 admin 账户登陆 console ⚠️请在登陆后修改 admin 用户的密码\n","excerpt":"对于想要快速开始、快速体验的用户来说，All In One 是最佳的安装方式\n在 Linux 上部署 KubeCube …","ref":"/docs/%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/all-in-one/","title":"All In One 最小化部署"},{"body":"本文档介绍了如何在 KubeCube 上创建、使用和编辑 ConfigMap。\n准备工作 创建一个租户，在租户下创建一个项目，在项目下一个创建一个命名空间，创建一个账号并赋予该命名空间操作权限。\n创建 ConfigMap 1、选择租户和项目，选择集群和空间，展开配置菜单，点击 ConfigMap 菜单按钮，进入 ConfigMap 管理页面。\n2、点击创建 ConfigMap 按钮，进入创建 ConfigMap 页面，填写信息后，点击立即创建按钮，即可创建一个 ConfigMap。\n 名称：输入 ConfigMap 名称。 数据：输入键值对形式的数据信息。  管理 ConfigMap 选择租户和项目，选择集群和空间，展开配置菜单，点击 ConfigMap 菜单按钮，进入 ConfigMap 管理页面。在 ConfigMap 管理页面可以对 ConfigMap 进行设置、删除和 Yaml 设置。\n查看 ConfigMap 详情 在 ConfigMap 管理页面，点击具体一条 ConfigMap 记录的名称，进入详情页面查看 ConfigMap 的详细信息。\n","excerpt":"本文档介绍了如何在 KubeCube 上创建、使用和编辑 ConfigMap。\n准备工作 创建一个租户，在租户下创建一个项目，在项目下一个创 …","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/k8s%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/config-manage/configmap/","title":"ConfigMap"},{"body":"本文档介绍了如何在 KubeCube 上创建、使用和编辑 Ingress。KubeCube 默认使用 Nginx Ingress。\n准备工作 创建一个租户，在租户下创建一个项目，在项目下一个创建一个命名空间，命名空间下创建一个 Service，创建一个账号并赋予该命名空间操作权限。\n创建 Ingress 1、选择租户和项目，选择集群和空间，展开服务与发现菜单，点击 Ingresses 菜单按钮，进入 Ingress 管理页面。\n2、点击创建负载均衡按钮，进入创建负载均衡页面，填写信息后，点击立即创建按钮，即可创建一个 Ingress。\n  名称：输入 Ingress 名称\n  端口：选择对外暴露访问的端口\n  调度算法：选择负载均衡轮询策略\n  转发规则：设置 Host，设置 Path 与 Service 端口的映射关系，可以添加多条转发规则\n  会话保持：开通/关闭会话保持\n  管理 Ingress 选择租户和项目，选择集群和空间，展开服务与发现菜单，点击 Ingresses 菜单按钮，进入 Ingress 管理页面，可以对 Ingress 列表进行设置重编辑，删除和 Yaml 设置。\n查看 Ingress 详情 在 Ingress 管理页面，点击具体一条 Ingress 记录的名称，进入详情页面。\nIngress 详情页面除了可以管理 Ingress，还可以查看 Ingress 的详细信息、关联的 Service 信息和事件信息。\n","excerpt":"本文档介绍了如何在 KubeCube 上创建、使用和编辑 Ingress。KubeCube 默认使用 Nginx Ingress。 …","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/k8s%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/service-discovery/ingress/","title":"Ingress"},{"body":"","excerpt":"","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/k8s%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/","title":"K8s资源管理"},{"body":"本文档介绍了如何在 KubeCube 上创建、使用和编辑 StatefulSet。\n准备工作 创建一个租户，在租户下创建一个项目，在项目下一个创建一个命名空间，创建一个账号并赋予该命名空间操作权限。\n创建 StatefulSet 1、选择租户和项目，选择集群和空间，展开【工作负载】菜单，点击【Statefulsets】，进入StatefulSet 管理页面。\n2、点击【部署】，编写 statefulset 的 yaml 文件。点击【确定】，即可部署该 statefulset。\nstatefulset 的规范可参考：https://v1-20.docs.kubernetes.io/docs/concepts/workloads/controllers/statefulset/。\n管理 StatefulSet 选择租户和项目，选择集群和空间，展开【工作负载】菜单，点击【Statefulset】，进入 StatefulSet 管理页面。在管理页面，可以看到该命名空间下的所有 statefulSet。\n同时也可以根据名称对列表进行搜索，或对单个 statefulset 进行副本数调整、删除，以及修改 Yaml。\n查看 StatefulSet 详情 在 StatefulSet 管理页面，点击任一 statefulSet 名称，即可进入到该 statefulSet 详情页。\nStatefulSet 详情页除了可以管理 StatefulSet，还可以查看 StatefulSet 的详细信息，关联的副本信息和副本的监控数据，以及 StatefulSet 和关联副本的事件和 condition 信息。\n","excerpt":"本文档介绍了如何在 KubeCube 上创建、使用和编辑 StatefulSet。\n准备工作 创建一个租户，在租户下创建一个项目，在项目下一 …","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/k8s%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E7%AE%A1%E7%90%86/statefulset/","title":"StatefulSet"},{"body":"本文档介绍了如何在 KubeCube 上使用 YAML 编排。\n准备工作 创建一个租户，在租户下创建一个项目，在项目下一个创建一个命名空间，创建一个账号并赋予该命名空间操作权限。\nYAML 编排 选择租户和项目，选择集群和空间，点击【 YAML 编排】 菜单，弹出 YAML 编排界面。\n填写要创建的资源的 YAML 格式定义，或者从文件导入，或者从已有资源导入，编辑完成后点击【确定】完成 YAML 编排。\n","excerpt":"本文档介绍了如何在 KubeCube 上使用 YAML 编排。\n准备工作 创建一个租户，在租户下创建一个项目，在项目下一个创建一个命名空间， …","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/k8s%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/other/yaml-deploy/","title":"Yaml 编排"},{"body":"KubeCube 产品由 KubeCube Service、Warden、CloudShell和 AuditLog Server 等组件组成，除了 Warden 部署在各个 Kubernetes 集群充当认证代理，其余组件均部署在管理集群。下图描述的 KubeCube 整体产品架构，包括与用户的交互，与 Kubernetes API Server 交互，Prometheus 监控和网易轻舟自研日志采集组件。\n 用户可以通过 KubeCube UI、CLI 指令、Open API 访问 Kubecube 服务和 Kubernetes 资源，其中 CLI 功能主要由 CloudShell 组件提供。 KubeCube Service 实现统一认证服务，透传代理 Kubernetes 资源请求，和提供更丰富的资源请求扩展接口。KubeCube Servie 包含四个组件：Restful API Server 提供API支持，AuditLog 负责审计日志收集和发送审计日志到处理组件 KubeCube AuditLog Server，Controller Manager 实现资源的 Reconcile 和 Validate Webhook ，Scout 实现各个集群之间资源的同步。 K8s APIServer 使用 Admission Webhook 的形式向 Warden（哨兵守卫）请求身份认证，并将操作审计日志上传给 KubeCube Service。 KubeCube Warden（哨兵守卫）负责身份认证和集群健康上报，部署在每一个业务集群，即使业务集群与管理集群脱离，依然可以实现认证和集群自治。 集成 Prometheus + AlertManager + Thanos 监控告警解决方案和网易轻舟自研的容器日志采集解决方案 Logseer + Logagent。 考虑到性能表现和可维护性因素，我们建议使用管理 Kubernetes 集群和业务 Kubernetes 集群，分开部署 Kubecube 服务和 Kubernetes 工作负载，支持对接多个业务 Kubernetes 集群。  ","excerpt":"KubeCube 产品由 KubeCube Service、Warden、CloudShell和 AuditLog Server 等组件组 …","ref":"/docs/overview/architecture/","title":"产品说明"},{"body":"","excerpt":"","ref":"/docs/%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/%E5%8F%82%E4%B8%8E%E8%B4%A1%E7%8C%AE/","title":"参与贡献"},{"body":"","excerpt":"","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/%E5%91%8A%E8%AD%A6/%E5%91%8A%E8%AD%A6%E8%81%94%E7%B3%BB%E4%BA%BA%E7%AE%A1%E7%90%86/","title":"告警联系人管理"},{"body":"PersistentVolume 应该由集群管理员事先提供，KubeCube 对其拥有查看和删除的能力\n查看 PersistentVolume 点击【集群管理】，选择需要查看的集群，点击【持久存储】来查看 PersistentVolume 详情，点击【删除】可以删除该资源\n","excerpt":"PersistentVolume 应该由集群管理员事先提供，KubeCube …","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD/k8s%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86/%E9%9B%86%E7%BE%A4%E7%BA%A7%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/pv/","title":"存储声明(PV)"},{"body":"","excerpt":"","ref":"/docs/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/%E4%BD%BF%E7%94%A8kubecube/","title":"快速体验"},{"body":"","excerpt":"","ref":"/docs/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/","title":"快速入门"},{"body":"","excerpt":"","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/%E6%97%A5%E5%BF%97/%E6%97%A5%E5%BF%97%E6%9F%A5%E8%AF%A2/","title":"日志查询"},{"body":"","excerpt":"","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/k8s%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/service-discovery/","title":"服务与发现"},{"body":"本文档介绍了如何在 KubeCube 上进行租户管理，并管理租户下的项目和成员。\n准备工作 使用平台管理员或租户管理员账号登录 KubeCube。\n租户管理 新增租户 1、使用平台管理员账号登录 KubeCube，展开【组织管理】菜单，点击【租户管理】，进入租户管理页面。\n2、点击【新增租户】，填写租户信息。\n 租户名称：平台内展示的租户名。 租户标识：  长度不得少于2位且不大于32位； 只能包含小写字母、数字，以及中划线 ‘-’ ； 全局唯一标识，不允许重复，不允许修改。    租户管理 使用平台管理员账号登录 KubeCube，展开【组织管理】菜单，点击【租户管理】，进入租户管理页面，可以查看到平台下所有的租户；使用租户管理员账号登录，进入租户管理页面，可以查看到该租户管理员所管理的所有租户。\n同时可以在该界面快捷添加成员、添加项目、修改租户名称。\n项目管理 在租户管理页面点击上方的【项目】，切换到项目管理页面。\n点击【新增项目】，即可添加项目：\n 所属租户：选择权限内的已有租户； 项目名称：项目的展示名称； 项目标识：  长度不得少于2位且不大于32位； 只能包含小写字母、数字，以及中划线 ‘-’ ； 全局唯一标识，不允许重复，不允许修改。   项目描述：对该项目的描述性语言。  添加项目成功后，也可以在该页面直接为该项目或其他项目添加项目成员。\n成员管理 在租户管理页面点击上方的到【成员】，切换到成员管理页面。\n点击【添加成员】，即可为指定的租户或项目添加成员。\n 所属租户：选择权限内的租户； 所属项目：选择所选租户下的项目，如果选择【不指定】，则为添加租户成员，否则为项目成员； 账号：选择平台内的用户； 角色：指定所选用户的角色，如果【所属项目】选择【不指定】，则角色可设置为租户管理员或普通成员；如果【所属项目】选择具体项目，则角色可设置为项目管理员或普通成员。  添加成员成功后，可以在该页面进行租户成员和项目成员的管理。同时可以在右上方，根据租户、项目、角色对成员进行过滤和搜索。\n","excerpt":"本文档介绍了如何在 KubeCube 上进行租户管理，并管理租户下的项目和成员。 …","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD/%E7%A7%9F%E6%88%B7%E7%AE%A1%E7%90%86/","title":"租户管理"},{"body":"本文档介绍了如何在 KubeCube 上创建、使用和编辑 Job。\n准备工作 创建一个租户，在租户下创建一个项目，在项目下一个创建一个命名空间，创建一个账号并赋予该命名空间操作权限。\n创建 Job 1、选择租户和项目，选择集群和空间，展开【工作负载】菜单，点击【Job】，进入 Job 管理页面。\n2、点击【部署】，编写 job 的 yaml 文件。点击【确定】，即可部署该 job。\njob 的 规范可参考：https://v1-20.docs.kubernetes.io/docs/concepts/workloads/controllers/job/。\n管理 Job 选择租户和项目，选择集群和空间，展开【工作负载】菜单，点击【Job】，进入 Job 管理页面。在管理页面，可以看到该命名空间下的所有 job 名称以及对应的状态、执行情况、运行时长，并可以在该界面对 job 进行删除操作。同时也可以根据名称对 job 进行搜索。\n查看 Job 详情 在 Job 管理页面，点击任一 job 名称，即可进入到该 job 详情页。\nJob 详情页除了可以管理 Job，还可以查看 Job 的详细信息，关联的副本信息和副本的监控数据，以及 Job 和关联副本的事件和 condition 信息。\n","excerpt":"本文档介绍了如何在 KubeCube 上创建、使用和编辑 Job。\n准备工作 创建一个租户，在租户下创建一个项目，在项目下一个创建一个命名空 …","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/k8s%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E7%AE%A1%E7%90%86/job/","title":"Job"},{"body":"","excerpt":"","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/%E5%91%8A%E8%AD%A6/%E5%91%8A%E8%AD%A6%E5%8E%86%E5%8F%B2/","title":"告警历史"},{"body":"","excerpt":"","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/%E6%97%A5%E5%BF%97/","title":"日志"},{"body":"KubeCube 可以添加其它集群作为计算集群，前提是，计算集群能够访问管控集群的 k8s api-server 和 KubeCube，默认情况下 KubeCube 使用 NodePort 对外暴露服务，用户可自行使用 ingress 进行暴露\n在节点上构建新集群并添加 在新节点上，需要构建 Kubernetes 集群并安装 KubeCube 依赖项\n开始安装 export CUSTOMIZE=\"true\";curl -fsSL https://gitee.com/kubecube/manifests/raw/master/entry.sh | bash 设置安装脚本参数 该安装模式下，需要修改以下参数：\nINSTALL_KUBECUBE_PIVOT=“false”\nINSTALL_KUBECUBE_MEMBER=“true”\nINSTALL_KUBERNETES=“true”\nMEMBER_CLUSTER_NAME=“member-1”\nMASTER_IP=\"${node ip}\"\nLOCAL_IP=\"${node ip}\"\nKUBECUBE_HOST=\"${pivot node ip}\"\n ${node ip} 表示你运行脚本所在 node 机器的 ip，该 node 需要可操作 kubectl ${pivot node ip} 表示管控集群 node 机器的 ip，用于向 KubeCube 注册集群\n # if install kubecube on pivot cluster INSTALL_KUBECUBE_PIVOT=\"false\" # if install kubecube on member cluster INSTALL_KUBECUBE_MEMBER=\"true\" # if install k8s INSTALL_KUBERNETES=\"true\" # there are four node mode below: # \"master\" : node will be installed as a master of cluster # \"node-join-master\" : node will be install as a worker of cluster to join master # \"control-plane-master\" : node will be installed as a master to control plane of cluster # \"node-join-control-plane\" : node will be installed as a master to join control plane NODE_MODE=\"master\" # +optional # must be set when INSTALL_KUBECUBE_MEMBER=\"true\" # this value is the name of member cluster you # want to take over MEMBER_CLUSTER_NAME=\"member-1\" # +optional # must be set when NODE_MODE=\"control-plane-master\" # or \"node-join-control-plane\" CONTROL_PLANE_ENDPOINT=\"\" #{ip}:{port} , dns # master ip means master node ip of cluster MASTER_IP=\"x.x.x.x\" # local ip mean node ip self, will equal to master ip # when NODE_MODE=\"master\" or \"control-plane-master\" LOCAL_IP=\"x.x.x.x\" # +optional # KUBECUBE_HOST must be set when as a member cluster to # join pivot cluster, the value is pivot node ip KUBECUBE_HOST=\"y.y.y.y\" # zone has two choice # 1. \"cn\" : in mainland # 2. \"others\" : out of mainland ZONE=\"cn\" # k8s version you want to install KUBERNETES_VERSION=\"1.19.0\" # +optional # the user who can access master node, it can be empty # when NODE_MODE=\"master\" or \"control-plane-master\" MASTER_USER=\"root\" # +optional # must be empty when ACCESS_PRIVATE_KEY_PATH set # password for master user to access master node ACCESS_PASSWORD=\"\" # +optional # must be empty when ACCESS_PASSWORD set # ACCESS_PRIVATE_KEY for master user to access master node ACCESS_PRIVATE_KEY_PATH=\"/root/.ssh/id_rsa\" 添加已有集群 添加已有集群需要从 console 页面获取添加集群的定制脚本\n在 console 页面中进行添加 todo\n使用脚本添加集群 在集群的 node 机器上，使用从 console 中下载的脚本，该机器需要能够执行 kubectl\n/bin/bash add_cluster.sh 等待集群添加完成 在 console 中确认新集群 ","excerpt":"KubeCube 可以添加其它集群作为计算集群，前提是，计算集群能够访问管控集群的 k8s api-server 和 KubeCube，默认 …","ref":"/docs/%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/%E6%B7%BB%E5%8A%A0%E8%AE%A1%E7%AE%97%E9%9B%86%E7%BE%A4/","title":"添加计算集群"},{"body":"KubeCube 的角色管理基于 Kubernetes 的 RBAC 实现，对多集群提供了统一的认证鉴权功能\n内置角色 KubeCube 针对不同的层级，内置了相应的管理员角色和只有读权限的 reviewer 角色\n   权限\\角色 platform-admin tenant-admin project-admin reviewer     集群管理 ✓      角色管理 ✓      角色查看 ✓ ✓ ✓    用户管理 ✓      节点管理 ✓      所有租户管理 ✓      所有租户成员管理 ✓      本租户管理 ✓ ✓     本租户成员管理 ✓ ✓     所有项目管理 ✓      所有项目成员管理 ✓      租户下项目管理 ✓ ✓     租户下项目成员管理 ✓ ✓     本项目管理 ✓ ✓ ✓    本项目成员管理 ✓ ✓ ✓    管理 namespace ✓      管理工作负载 ✓ ✓ ✓    管理卷 ✓ ✓ ✓    管理 service ✓ ✓ ✓    管理 ingress ✓ ✓ ✓    管理 secrets ✓ ✓ ✓    管理 serviceaccout ✓ ✓ ✓    管理 subnamespaceanchor ✓ ✓ ✓    查看工作负载 ✓ ✓ ✓ ✓   查看卷 ✓ ✓ ✓ ✓   查看 service ✓ ✓ ✓ ✓   查看 ingress ✓ ✓ ✓ ✓   查看 secrets ✓ ✓ ✓ ✓   查看 serviceaccout ✓ ✓ ✓ ✓   查看 subnamespaceanchor ✓ ✓ ✓ ✓     KubeCube 使用 HNC 来实现 tenant、project 和 namespace 的层级，以及彼此之间的隔离；为了实现 namespace 层级的隔离，除 platform-admin 外所有角色，通过 subnamespaceanchor 资源来管理 namespace\n 管理角色 通过角色标签栏来选择角色层级，点击【添加角色】来新建自定义角色，【继承已有】会以本层级的 admin 角色为模版新建出角色，【自定义】可以自定义编辑新角色\n通过勾选具体的权限项来自定义角色的权限，点击【修改】提交修改\n","excerpt":"KubeCube 的角色管理基于 Kubernetes 的 RBAC 实现，对多集群提供了统一的认证鉴权功能\n内置角色 KubeCube 针 …","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD/%E8%A7%92%E8%89%B2%E7%AE%A1%E7%90%86/","title":"角色管理"},{"body":"","excerpt":"","ref":"/docs/%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/","title":"部署指南"},{"body":"","excerpt":"","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/k8s%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/config-manage/","title":"配置管理"},{"body":"KubeCube 支持集群管理员通过 Console 页面管理各集群的 Node，也支持集群管理员直接使用黑屏操作对 各集群 Node 进行管理\n查看节点信息 点击 Node 名称来查看节点的具体信息，点击【更多】查看 Node 的所有标签，\n添加节点 KubeCube 支持集群管理员通过黑屏操作来自行添加节点，也可以点击【添加节点】来使用 KubeCube 的脚本来进行节点添加\n// todo：确认 master 和 node 节点的添加细节\n节点操作 点击【编辑标签】来对节点的标签进行编辑\n点击【禁止调度】来限制 pod 调度到该节点\n点击【更多】来对节点进行更多高级操作，包括：设置节点类型、设置污点、平滑迁移等\n","excerpt":"KubeCube 支持集群管理员通过 Console 页面管理各集群的 Node，也支持集群管理员直接使用黑屏操作对 各集群 Node 进行 …","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD/k8s%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86/%E9%9B%86%E7%BE%A4%E7%BA%A7%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/node/","title":"集群节点(Node)"},{"body":"本文档介绍了如何在 KubeCube 上创建、使用和编辑 CronJob。\n准备工作 创建一个租户，在租户下创建一个项目，在项目下一个创建一个命名空间，创建一个账号并赋予该命名空间操作权限。\n创建 CronJob 1、选择租户和项目，选择集群和空间，展开【工作负载】菜单，点击【CronJob】，进入 CronJob 管理页面。\n2、点击【部署】，编写 CronJob 的 yaml 文件。点击【确定】，即可部署该 CronJob。\nCronJob 的 规范可参考：https://v1-20.docs.kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/。\n管理 CronJob 选择租户和项目，选择集群和空间，展开【工作负载】菜单，点击【CronJob】，进入 CronJob 管理页面。在管理页面，可以看到该命名空间下的所有 CronJob ，包括对应的名称、空间、状态、定时调度设置、正在运行的任务数以及创建时间。并可以在该界面对 CronJob 进行删除和修改操作。同时也可以根据名称对 CronJob 进行搜索。\n查看 CronJob 详情 在 CronJob 管理页面，点击任一 CronJob 名称，即可进入到该 CronJob 详情页。\nCronJob 详情页除了可以管理 CronJob，还可以查看 CronJob 的详细信息，根据状态过滤该 CronJob 关联的任务列表，以及查看该 CronJob 和该 CronJob 所关联的副本的事件。\n","excerpt":"本文档介绍了如何在 KubeCube 上创建、使用和编辑 CronJob。\n准备工作 创建一个租户，在租户下创建一个项目，在项目下一个创建一 …","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/k8s%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E7%AE%A1%E7%90%86/cronjob/","title":"CronJob"},{"body":"","excerpt":"","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/","title":"产品使用指南"},{"body":"","excerpt":"","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/%E5%91%8A%E8%AD%A6/","title":"告警管理"},{"body":"本文提供 Kubernetes 的高可用部署和 KubeCube 的高可用部署方案，VIP 的实现需要用户自行提供\n主机规划    IP 地址 主机名 角色     10.173.32.2 lb1 Keepalived \u0026 HAproxy   10.173.32.3 lb2 Keepalived \u0026 HAproxy   10.173.32.4 master1 master, etcd   10.173.32.5 master2 master, etcd   10.173.32.6 master3 master, etcd   10.173.32.7 worker1 worker   10.173.32.8 worker2 worker   10.173.32.9 worker3 worker   10.173.32.10  vip 地址     ⚠️master2、master3、worker1、worker2、worker3 需要能够通过密钥或者密码 ssh 访问 master1\n 部署高可用 Kubernetes 开始安装 在 master1 上执行部署脚本\nexport CUSTOMIZE=\"true\";curl -fsSL https://gitee.com/kubecube/manifests/raw/master/entry.sh | bash 设置脚本参数，并按照提示继续运行安装脚本并等待 Kubernetes 安装完成\n# if install kubecube on pivot cluster INSTALL_KUBECUBE_PIVOT=\"false\" # if install kubecube on member cluster INSTALL_KUBECUBE_MEMBER=\"false\" # if install k8s INSTALL_KUBERNETES=\"true\" # there are four node mode below: # \"master\" : node will be installed as a master of cluster # \"node-join-master\" : node will be install as a worker of cluster to join master # \"control-plane-master\" : node will be installed as a master to control plane of cluster # \"node-join-control-plane\" : node will be installed as a master to join control plane NODE_MODE=\"control-plane-master\" # +optional # must be set when INSTALL_KUBECUBE_MEMBER=\"true\" # this value is the name of member cluster you # want to take over MEMBER_CLUSTER_NAME=\"\" # +optional # must be set when NODE_MODE=\"control-plane-master\" # or \"node-join-control-plane\" CONTROL_PLANE_ENDPOINT=\"10.173.32.10\" #{ip}:{port} , dns # master ip means master node ip of cluster MASTER_IP=\"10.173.32.4\" # local ip mean node ip self, will equal to master ip # when NODE_MODE=\"master\" or \"control-plane-master\" LOCAL_IP=\"10.173.32.4\" # +optional # KUBECUBE_HOST must be set when as a member cluster to # join pivot cluster, the value is pivot node ip KUBECUBE_HOST=\"\" # zone has two choice # 1. \"cn\" : in mainland # 2. \"others\" : out of mainland ZONE=\"cn\" # k8s version you want to install KUBERNETES_VERSION=\"1.19.0\" # +optional # the user who can access master node, it can be empty # when NODE_MODE=\"master\" or \"control-plane-master\" MASTER_USER=\"root\" # +optional # must be empty when ACCESS_PRIVATE_KEY_PATH set # password for master user to access master node ACCESS_PASSWORD=\"\" # +optional # must be empty when ACCESS_PASSWORD set # ACCESS_PRIVATE_KEY for master user to access master node ACCESS_PRIVATE_KEY_PATH=\"/root/.ssh/id_rsa\" master2 节点加入 control-plane 在 master2 上执行部署脚本\nexport CUSTOMIZE=\"true\";curl -fsSL https://gitee.com/kubecube/manifests/raw/master/entry.sh | bash 设置脚本参数，并按照提示继续运行安装脚本并等待 master2 加入 control-plane\n master3 加入 control-plane 与此类似，仅需修改 LOCAL_IP为10.173.32.6\n # if install kubecube on pivot cluster INSTALL_KUBECUBE_PIVOT=\"false\" # if install kubecube on member cluster INSTALL_KUBECUBE_MEMBER=\"false\" # if install k8s INSTALL_KUBERNETES=\"true\" # there are four node mode below: # \"master\" : node will be installed as a master of cluster # \"node-join-master\" : node will be install as a worker of cluster to join master # \"control-plane-master\" : node will be installed as a master to control plane of cluster # \"node-join-control-plane\" : node will be installed as a master to join control plane NODE_MODE=\"node-join-control-plane\" # +optional # must be set when INSTALL_KUBECUBE_MEMBER=\"true\" # this value is the name of member cluster you # want to take over MEMBER_CLUSTER_NAME=\"\" # +optional # must be set when NODE_MODE=\"control-plane-master\" # or \"node-join-control-plane\" CONTROL_PLANE_ENDPOINT=\"10.173.32.10\" #{ip}:{port} , dns # master ip means master node ip of cluster MASTER_IP=\"10.173.32.4\" # local ip mean node ip self, will equal to master ip # when NODE_MODE=\"master\" or \"control-plane-master\" LOCAL_IP=\"10.173.32.5\" # +optional # KUBECUBE_HOST must be set when as a member cluster to # join pivot cluster, the value is pivot node ip KUBECUBE_HOST=\"\" # zone has two choice # 1. \"cn\" : in mainland # 2. \"others\" : out of mainland ZONE=\"cn\" # k8s version you want to install KUBERNETES_VERSION=\"1.19.0\" # +optional # the user who can access master node, it can be empty # when NODE_MODE=\"master\" or \"control-plane-master\" MASTER_USER=\"root\" # +optional # must be empty when ACCESS_PRIVATE_KEY_PATH set # password for master user to access master node ACCESS_PASSWORD=\"\" # +optional # must be empty when ACCESS_PASSWORD set # ACCESS_PRIVATE_KEY for master user to access master node ACCESS_PRIVATE_KEY_PATH=\"/root/.ssh/id_rsa\" worker1 作为工作节点加入集群 在 worker1 上执行部署脚本\nexport CUSTOMIZE=\"true\";curl -fsSL https://gitee.com/kubecube/manifests/raw/master/entry.sh | bash 设置脚本参数，并按照提示继续运行安装脚本并等待 worker1 加入集群\n worker2 和 worker3 加入集群的方式与之类似，仅需修改LOCAL_IP为本机 IP 即可\n # if install kubecube on pivot cluster INSTALL_KUBECUBE_PIVOT=\"false\" # if install kubecube on member cluster INSTALL_KUBECUBE_MEMBER=\"false\" # if install k8s INSTALL_KUBERNETES=\"true\" # there are four node mode below: # \"master\" : node will be installed as a master of cluster # \"node-join-master\" : node will be install as a worker of cluster to join master # \"control-plane-master\" : node will be installed as a master to control plane of cluster # \"node-join-control-plane\" : node will be installed as a master to join control plane NODE_MODE=\"node-join-master\" # +optional # must be set when INSTALL_KUBECUBE_MEMBER=\"true\" # this value is the name of member cluster you # want to take over MEMBER_CLUSTER_NAME=\"\" # +optional # must be set when NODE_MODE=\"control-plane-master\" # or \"node-join-control-plane\" CONTROL_PLANE_ENDPOINT=\"\" #{ip}:{port} , dns # master ip means master node ip of cluster MASTER_IP=\"10.173.32.4\" # local ip mean node ip self, will equal to master ip # when NODE_MODE=\"master\" or \"control-plane-master\" LOCAL_IP=\"10.173.32.7\" # +optional # KUBECUBE_HOST must be set when as a member cluster to # join pivot cluster, the value is pivot node ip KUBECUBE_HOST=\"\" # zone has two choice # 1. \"cn\" : in mainland # 2. \"others\" : out of mainland ZONE=\"cn\" # k8s version you want to install KUBERNETES_VERSION=\"1.19.0\" # +optional # the user who can access master node, it can be empty # when NODE_MODE=\"master\" or \"control-plane-master\" MASTER_USER=\"root\" # +optional # must be empty when ACCESS_PRIVATE_KEY_PATH set # password for master user to access master node ACCESS_PASSWORD=\"\" # +optional # must be empty when ACCESS_PASSWORD set # ACCESS_PRIVATE_KEY for master user to access master node ACCESS_PRIVATE_KEY_PATH=\"/root/.ssh/id_rsa\" 部署高可用 KubeCube 在 master1 上执行部署脚本\nexport CUSTOMIZE=\"true\";curl -fsSL https://gitee.com/kubecube/manifests/raw/master/entry.sh | bash 设置脚本参数，并按照提示继续运行安装脚本并等待 KubeCube 部署完成\n install.conf  # if install kubecube on pivot cluster INSTALL_KUBECUBE_PIVOT=\"true\" # if install kubecube on member cluster INSTALL_KUBECUBE_MEMBER=\"false\" # if install k8s INSTALL_KUBERNETES=\"false\" # there are four node mode below: # \"master\" : node will be installed as a master of cluster # \"node-join-master\" : node will be install as a worker of cluster to join master # \"control-plane-master\" : node will be installed as a master to control plane of cluster # \"node-join-control-plane\" : node will be installed as a master to join control plane NODE_MODE=\"control-plane-master\" # +optional # must be set when INSTALL_KUBECUBE_MEMBER=\"true\" # this value is the name of member cluster you # want to take over MEMBER_CLUSTER_NAME=\"\" # +optional # must be set when NODE_MODE=\"control-plane-master\" # or \"node-join-control-plane\" CONTROL_PLANE_ENDPOINT=\"\" #{ip}:{port} , dns # master ip means master node ip of cluster MASTER_IP=\"10.173.32.4\" # local ip mean node ip self, will equal to master ip # when NODE_MODE=\"master\" or \"control-plane-master\" LOCAL_IP=\"10.173.32.4\" # +optional # KUBECUBE_HOST must be set when as a member cluster to # join pivot cluster, the value is pivot node ip KUBECUBE_HOST=\"\" # zone has two choice # 1. \"cn\" : in mainland # 2. \"others\" : out of mainland ZONE=\"cn\" # k8s version you want to install KUBERNETES_VERSION=\"1.19.0\" # +optional # the user who can access master node, it can be empty # when NODE_MODE=\"master\" or \"control-plane-master\" MASTER_USER=\"root\" # +optional # must be empty when ACCESS_PRIVATE_KEY_PATH set # password for master user to access master node ACCESS_PASSWORD=\"\" # +optional # must be empty when ACCESS_PASSWORD set # ACCESS_PRIVATE_KEY for master user to access master node ACCESS_PRIVATE_KEY_PATH=\"/root/.ssh/id_rsa\"  cube.conf  将kubecube_replicas设置为3，使得 KubeCube 使用 3 副本部署，并且由于podAntiAffinity，它们会运行在非controlPlane的节点上，并且每个节点仅运行单个副本\n# custom values for kubecube kubecube_replicas=3 kubecube_args_logLevel=\"info\" ","excerpt":"本文提供 Kubernetes 的高可用部署和 KubeCube 的高可用部署方案，VIP 的实现需要用户自行提供\n主机规划    IP 地 …","ref":"/docs/%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/%E5%A4%9A%E8%8A%82%E7%82%B9%E9%AB%98%E5%8F%AF%E7%94%A8%E9%83%A8%E7%BD%B2/","title":"多节点高可用部署"},{"body":"","excerpt":"","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/k8s%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/storage-manage/","title":"存储管理"},{"body":"NetworkPolicy 依赖 CNI 实现，创建一个 NetworkPolicy 资源对象而没有控制器来使它生效的话，是没有任何作用的，KubeCube 默认使用 calico\n查看 NetworkPolicy 点击【集群管理】，选择要操作的集群，点击【网络策略】，点击【查看详情】可以查看 NetworkPolicy 的详细描述，点击【设置】可以对 NetworkPolicy 进行修改，点击【删除】可以删除该资源\n创建 NetworkPolicy 点击【创建网络策略】可以创建新的 NetworkPolicy\n","excerpt":"NetworkPolicy 依赖 CNI 实现，创建一个 NetworkPolicy 资源对象而没有控制器来使它生效的话，是没有任何作用 …","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD/k8s%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86/%E9%9B%86%E7%BE%A4%E7%BA%A7%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/networkpolicy/","title":"网络策略(NetworkPolicy)"},{"body":"KubeCube 在 Kubernetes 原生的资源配额能力上进行了拓展，在租户层级即可对资源配额进行限制，在使用体验上与 Kubernetes 原生的 ResouceQuota 保持一致\n KubeCube 目前支持对 nvidia gpu 进行资源配额\n 资源配额结构 资源配额的计算结构遵循以下约束：\n 租户下 namespace 的资源配额总和 \u003c 租户配额 集群下租户的资源配额总和 \u003c 集群的物理资源   CubeResourceQuota 是 KubeCube 对于 namespace 级别的 ResourceQuota 的上层抽象，基于 CRD 实现\n Tenant 资源配额 前置要求 创建一个租户\n设置租户的资源配额 选择租户，点击【调整配额】对指定集群下的租户进行资源配额的设置\n在可填框中填入期望设置的资源配额，点击【确定】保存配额设置\n 【集群可分配】表示该集群剩余可分配资源 【租户已分配】表示该租户下所有 namespace 已分配的资源总和  Namespace 资源配额 前置要求 创建一个租户，在租户下创建项目\n设置 namespace 的资源配额 点击右上方【租户】选择框，选择租户，点击【创建空间】创建新的 namespace 并设置资源配额，也可以点击【修改】对已创建的 namespace 的资源配额进行修改\n创建 namespace 时，需要选择空间所属的集群、租户、项目，namespace 一旦创建，其所属关系不能更改。在可填框中填入期望的资源配额，点击【确定】使资源配额生效\n【租户可分配】表示该 namespace 所属的租户所剩的可分配资源配额\n","excerpt":"KubeCube 在 Kubernetes 原生的资源配额能力上进行了拓展，在租户层级即可对资源配额进行限制， …","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD/%E9%85%8D%E9%A2%9D%E7%AE%A1%E7%90%86/","title":"配额管理"},{"body":"","excerpt":"","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD/k8s%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86/","title":"K8s集群管理"},{"body":"本文档介绍了如何在 KubeCube 上管理 Pods。\n准备工作 创建一个租户，在租户下创建一个项目，在项目下一个创建一个命名空间，创建一个账号并赋予该命名空间操作权限。\n管理 Pod 选择租户和项目，选择集群和空间，展开【工作负载】菜单，点击【Pod】，进入 Pod 管理页面。在管理页面，可以看到该命名空间下的所有 pod，包括每个 pod 的名称、IP、状态、重启次数、CPU 使用量、内存使用量以及创建时间。\n同时也可以根据名称对列表进行搜索，或对单个 pod 进行查看和删除。\n","excerpt":"本文档介绍了如何在 KubeCube 上管理 Pods。\n准备工作 创建一个租户，在租户下创建一个项目，在项目下一个创建一个命名空间，创建一 …","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/k8s%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E7%AE%A1%E7%90%86/pod/","title":"Pod"},{"body":"","excerpt":"","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/k8s%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/other/","title":"其他"},{"body":"","excerpt":"","ref":"/docs/%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/","title":"开发指南"},{"body":"KubeCube 提供为已有集群添加节点的能力\n向集群添加工作节点 在新节点上执行部署脚本\nexport CUSTOMIZE=\"true\";curl -fsSL https://gitee.com/kubecube/manifests/raw/master/entry.sh | bash 设置脚本参数，并按照提示继续运行安装脚本并等待新节点加入集群\n MASTER_IP 为 master 节点 ip LOCAL_IP 为新节点 ip  # if install kubecube on pivot cluster INSTALL_KUBECUBE_PIVOT=\"false\" # if install kubecube on member cluster INSTALL_KUBECUBE_MEMBER=\"false\" # if install k8s INSTALL_KUBERNETES=\"true\" # there are four node mode below: # \"master\" : node will be installed as a master of cluster # \"node-join-master\" : node will be install as a worker of cluster to join master # \"control-plane-master\" : node will be installed as a master to control plane of cluster # \"node-join-control-plane\" : node will be installed as a master to join control plane NODE_MODE=\"node-join-master\" # +optional # must be set when INSTALL_KUBECUBE_MEMBER=\"true\" # this value is the name of member cluster you # want to take over MEMBER_CLUSTER_NAME=\"\" # +optional # must be set when NODE_MODE=\"control-plane-master\" # or \"node-join-control-plane\" CONTROL_PLANE_ENDPOINT=\"\" #{ip}:{port} , dns # master ip means master node ip of cluster MASTER_IP=\"10.173.32.4\" # local ip mean node ip self, will equal to master ip # when NODE_MODE=\"master\" or \"control-plane-master\" LOCAL_IP=\"10.173.32.7\" # +optional # KUBECUBE_HOST must be set when as a member cluster to # join pivot cluster, the value is pivot node ip KUBECUBE_HOST=\"\" # zone has two choice # 1. \"cn\" : in mainland # 2. \"others\" : out of mainland ZONE=\"cn\" # k8s version you want to install KUBERNETES_VERSION=\"1.19.0\" # +optional # the user who can access master node, it can be empty # when NODE_MODE=\"master\" or \"control-plane-master\" MASTER_USER=\"root\" # +optional # must be empty when ACCESS_PRIVATE_KEY_PATH set # password for master user to access master node ACCESS_PASSWORD=\"\" # +optional # must be empty when ACCESS_PASSWORD set # ACCESS_PRIVATE_KEY for master user to access master node ACCESS_PRIVATE_KEY_PATH=\"/root/.ssh/id_rsa\" 向集群的 control-plane 添加 master 节点 在新节点上执行部署脚本\nexport CUSTOMIZE=\"true\";curl -fsSL https://gitee.com/kubecube/manifests/raw/master/entry.sh | bash 设置脚本参数，并按照提示继续运行安装脚本并等待新节点加入 control-plane\n MASTER_IP 需要填已有的 master 节点 ip LOCAL_IP 需要填新节点的节点 ip CONTROL_PLANE_ENDPOINT 为高可用 vip  # if install kubecube on pivot cluster INSTALL_KUBECUBE_PIVOT=\"false\" # if install kubecube on member cluster INSTALL_KUBECUBE_MEMBER=\"false\" # if install k8s INSTALL_KUBERNETES=\"true\" # there are four node mode below: # \"master\" : node will be installed as a master of cluster # \"node-join-master\" : node will be install as a worker of cluster to join master # \"control-plane-master\" : node will be installed as a master to control plane of cluster # \"node-join-control-plane\" : node will be installed as a master to join control plane NODE_MODE=\"node-join-control-plane\" # +optional # must be set when INSTALL_KUBECUBE_MEMBER=\"true\" # this value is the name of member cluster you # want to take over MEMBER_CLUSTER_NAME=\"\" # +optional # must be set when NODE_MODE=\"control-plane-master\" # or \"node-join-control-plane\" CONTROL_PLANE_ENDPOINT=\"10.173.32.10\" #{ip}:{port} , dns # master ip means master node ip of cluster MASTER_IP=\"10.173.32.4\" # local ip mean node ip self, will equal to master ip # when NODE_MODE=\"master\" or \"control-plane-master\" LOCAL_IP=\"10.173.32.5\" # +optional # KUBECUBE_HOST must be set when as a member cluster to # join pivot cluster, the value is pivot node ip KUBECUBE_HOST=\"\" # zone has two choice # 1. \"cn\" : in mainland # 2. \"others\" : out of mainland ZONE=\"cn\" # k8s version you want to install KUBERNETES_VERSION=\"1.19.0\" # +optional # the user who can access master node, it can be empty # when NODE_MODE=\"master\" or \"control-plane-master\" MASTER_USER=\"root\" # +optional # must be empty when ACCESS_PRIVATE_KEY_PATH set # password for master user to access master node ACCESS_PASSWORD=\"\" # +optional # must be empty when ACCESS_PASSWORD set # ACCESS_PRIVATE_KEY for master user to access master node ACCESS_PRIVATE_KEY_PATH=\"/root/.ssh/id_rsa\" ","excerpt":"KubeCube 提供为已有集群添加节点的能力\n向集群添加工作节点 在新节点上执行部署脚本\nexport …","ref":"/docs/%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/%E6%B7%BB%E5%8A%A0%E8%8A%82%E7%82%B9/","title":"添加节点"},{"body":"准备工作 创建一个租户，在租户下创建一个项目，在项目下一个创建一个命名空间，创建一个账号并赋予该命名空间操作权限。\n创建 CRD 选择租户和项目，选择集群和空间，选择自定义资源 CRD 菜单，进入自定义资源列表页面。点击创建自定义资源按钮可以以 YAML 的模式创建自定义资源 CRD。\n创建 CR 在 CRD 列表页面，点击具体一条记录的版本，进入 CRD 关联的实例页面，可以管理和创建相应的 CR。\n","excerpt":"准备工作 创建一个租户，在租户下创建一个项目，在项目下一个创建一个命名空间，创建一个账号并赋予该命名空间操作权限。\n创建 CRD 选择租户和 …","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/k8s%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E7%AE%A1%E7%90%86/crd/","title":"CRD"},{"body":"FAQ\n","excerpt":"FAQ\n","ref":"/docs/faq/","title":"FAQ"},{"body":"@star\n","excerpt":"@star\n","ref":"/docs/%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/%E5%BC%80%E5%90%AF%E9%99%84%E5%8A%A0%E5%8A%9F%E8%83%BD/","title":"可插拔组件"},{"body":"本文档介绍了如何在 KubeCube 上查询和导出操作审计日志。\n准备工作 使用平台管理员账号登录 KubeCube。\n开启操作审计 部署好 KubeCube 后，操作审计功能默认开启。如果需要关闭或开启操作审计功能：\n1、使用平台管理员账号登录 KubeCube；\n2、点击页面右上角【切换到控制台】，点击任意空间，进入到控制台页面；\n3、在左侧菜单栏点击【自定义资源CRD】，进入到集群级别 CRD 列表，可以点击右上方输入 “hotplug” 进行搜索，找到 “hotplugs.hotplug.kubecube.io” CRD，点击【v1】版本进入 CRD 详情页；\n4、选择 common 实例，点击【设置YAML】，找到 spec - component - name: audit，将 “status” 改成 “disabled”，即关闭审计功能；改为 “enabled”，为开启审计功能。\n查询审计日志 使用平台管理员账号登录 KubeCube 后，展开【管控运维】菜单，点击【操作审计】，进入操作审计页面。\n如图所示，在该页面展示出了所有的审计日志，包括审计操作者的账号、操作的时间、IP地址、事件名称、资源、状态。同时平台管理员也可以根据账号、IP地址等进行过滤查询。\n导出审计日志 在操作审计页面，对审计日志查询后，点击【导出】，即可对查询结果进行导出。导出的日志条数不超过10000条。\n","excerpt":"本文档介绍了如何在 KubeCube 上查询和导出操作审计日志。\n准备工作 使用平台管理员账号登录 KubeCube。 …","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD/%E6%93%8D%E4%BD%9C%E5%AE%A1%E8%AE%A1/","title":"操作审计"},{"body":"本文档介绍了如何在 KubeCube 上创建、使用和编辑 DaemonSet。\n准备工作 创建一个租户，在租户下创建一个项目，在项目下创建一个命名空间，创建一个账号并赋予该命名空间操作权限。\n创建 DaemonSet 1、选择租户和项目，选择集群和空间，展开【工作负载】菜单，点击 【DaemonSets】，进入 DaemonSet 管理页面。\n2、点击【部署】，编写 daemonSet 的 yaml 文件。点击【确定】，即开始部署该 daemonSet。\ndaemonSet 的 规范可参考：https://v1-20.docs.kubernetes.io/zh/docs/concepts/workloads/controllers/daemonset/。\n注意，daemonSet 的 namespace 应与当前所在 namespace 一致。\n管理 DaemonSet 选择租户和项目，选择集群和空间，展开【工作负载】菜单，点击【DaemonSets】，进入 DaemonSet 管理页面，可以看到该命名空间下的所有 daemonSet，包括名称、级别以及创建时间。\n同时也可以根据名称对列表进行搜索，或对单个 daemonSet 进行删除或修改。\n查看 DaemonSet 详情 在 DaemonSet 管理页面，点击任一 daemonSet 名称，可进入到该 daemonSet 详情页。\n在 DaemonSet 详情页，可以查看到 daemonSet 的具体信息，以及该 daemonSet 所关联的所有副本的详情、副本的监控数据以及该 daemonSet 和副本的事件信息和 condition 信息。\n","excerpt":"本文档介绍了如何在 KubeCube 上创建、使用和编辑 DaemonSet。\n准备工作 创建一个租户，在租户下创建一个项目，在项目下创建一 …","ref":"/docs/%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/k8s%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/%E5%B7%A5%E4%BD%9C%E8%B4%9F%E8%BD%BD%E7%AE%A1%E7%90%86/daemonset/","title":"DaemonSet"},{"body":"KubeCube是什么 如何为KubeCube做贡献 ","excerpt":"KubeCube是什么 如何为KubeCube做贡献 ","ref":"/docs/","title":"文档"},{"body":"  #td-cover-block-0 { background-image: url(/featured-background_hu376e1fbab6ce6c455a2b3aa5c258c0d9_496231_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/featured-background_hu376e1fbab6ce6c455a2b3aa5c258c0d9_496231_1920x1080_fill_q75_catmullrom_top.jpg); } }  欢迎使用KubeCube KubeCube是一个开源的企业级容器平台，为企业提供kubernetes资源可视化管理以及统一的多集群多租户管理功能。KubeCube可以简化应用部署、管理应用的生命周期和提供丰富的监控和日志审计功能，帮助企业快速构建一个强大和功能丰富的容器云平台，并增强 DevOps 团队的能力。\n了解更多   下载             开箱即用 我是描述\n   多租户管理 我是描述\n   多K8s集群统一管理 我是描述\n   集群自治 我是描述\n   功能热插拔 我是描述\n   多种接入方式 我是描述\n   无供应商锁定 我是描述\n   操作审计 我是描述\n   可观测性 我是描述\n       参与贡献 欢迎提交 Bug或建议\n欢迎提交 Pull Request\n…\n    ","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/","title":"KubeCube"},{"body":"","excerpt":"","ref":"/search/","title":"Search Results"},{"body":"","excerpt":"","ref":"/community/","title":"开源社区"}]